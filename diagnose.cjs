const fs = require('fs');
const path = require('path');
const os = require('os');

console.log('üîç DIAGN√ìSTICO DE MCP WCAG\n');
console.log('='.repeat(50));

const CONFIG_PATH = path.join(
  os.homedir(),
  'AppData',
  'Roaming',
  'Claude',
  'claude_desktop_config.json'
);

const MCP_PATH = path.join(__dirname, 'dist', 'index.js');

// 1. Verificar archivo compilado
console.log('\n1Ô∏è‚É£ VERIFICANDO ARCHIVO COMPILADO:');
if (fs.existsSync(MCP_PATH)) {
  console.log('   ‚úÖ dist/index.js existe');
} else {
  console.log('   ‚ùå dist/index.js NO EXISTE - Ejecuta: npm run build');
}

// 2. Verificar configuraci√≥n de Claude
console.log('\n2Ô∏è‚É£ VERIFICANDO CONFIGURACI√ìN DE CLAUDE:');
if (fs.existsSync(CONFIG_PATH)) {
  console.log('   ‚úÖ Archivo de configuraci√≥n encontrado');
  
  try {
    const config = JSON.parse(fs.readFileSync(CONFIG_PATH, 'utf8'));
    
    // Verificar secci√≥n incorrecta
    if (config.mcps && config.mcps['wcag-accessibility']) {
      console.log('   ‚ö†Ô∏è  MCP en secci√≥n INCORRECTA (mcps)');
      console.log('   ‚ùå Necesita moverse a "mcpServers"');
    }
    
    // Verificar secci√≥n correcta
    if (config.mcpServers && config.mcpServers['wcag-accessibility']) {
      console.log('   ‚úÖ MCP en secci√≥n CORRECTA (mcpServers)');
      
      const configuredPath = config.mcpServers['wcag-accessibility'].args[0];
      const expectedPath = MCP_PATH;
      
      console.log('\n3Ô∏è‚É£ VERIFICANDO RUTAS:');
      console.log('   Configurada:', configuredPath);
      console.log('   Esperada:   ', expectedPath);
      
      if (configuredPath === expectedPath || 
          configuredPath === expectedPath.replace(/\\/g, '\\\\')) {
        console.log('   ‚úÖ Ruta correcta');
      } else {
        console.log('   ‚ö†Ô∏è  Las rutas no coinciden exactamente');
      }
    } else if (!config.mcps || !config.mcps['wcag-accessibility']) {
      console.log('   ‚ùå MCP NO CONFIGURADO');
      console.log('   Ejecuta: npm run install-mcp');
    }
    
    // Contar otros MCPs
    const mcpCount = config.mcpServers ? Object.keys(config.mcpServers).length : 0;
    console.log(`\n4Ô∏è‚É£ OTROS MCPs INSTALADOS: ${mcpCount}`);
    
  } catch (error) {
    console.log('   ‚ùå Error leyendo configuraci√≥n:', error.message);
  }
} else {
  console.log('   ‚ùå No se encuentra el archivo de configuraci√≥n');
  console.log('   Ruta esperada:', CONFIG_PATH);
}

console.log('\n' + '='.repeat(50));

// Diagn√≥stico final
console.log('\nüìä DIAGN√ìSTICO FINAL:\n');

if (fs.existsSync(MCP_PATH) && fs.existsSync(CONFIG_PATH)) {
  try {
    const config = JSON.parse(fs.readFileSync(CONFIG_PATH, 'utf8'));
    
    if (config.mcpServers && config.mcpServers['wcag-accessibility']) {
      console.log('‚úÖ TODO CONFIGURADO CORRECTAMENTE');
      console.log('\n‚ö†Ô∏è  IMPORTANTE:');
      console.log('   1. CIERRA Claude Desktop COMPLETAMENTE');
      console.log('      (desde la bandeja del sistema)');
      console.log('   2. Vuelve a abrirlo');
      console.log('   3. El MCP deber√≠a funcionar');
    } else if (config.mcps && config.mcps['wcag-accessibility']) {
      console.log('‚ùå CONFIGURACI√ìN EN SECCI√ìN INCORRECTA');
      console.log('\nüîß SOLUCI√ìN:');
      console.log('   Ejecuta: npm run install-mcp');
      console.log('   Esto mover√° el MCP a la secci√≥n correcta');
    } else {
      console.log('‚ùå MCP NO CONFIGURADO');
      console.log('\nüîß SOLUCI√ìN:');
      console.log('   Ejecuta: npm run install-mcp');
    }
  } catch (error) {
    console.log('‚ùå ERROR EN LA CONFIGURACI√ìN');
    console.log('   Ejecuta: npm run install-mcp');
  }
} else {
  console.log('‚ùå INSTALACI√ìN INCOMPLETA');
  console.log('\nüîß SOLUCI√ìN:');
  if (!fs.existsSync(MCP_PATH)) {
    console.log('   1. npm run build');
  }
  console.log('   2. npm run install-mcp');
}

console.log('\n' + '='.repeat(50));
console.log('\nüí° Si necesitas ayuda, revisa FIX_DETECTION.md');
